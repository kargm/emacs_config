;(server-start)

(setq line-number-mode t)
(setq c-auto-newline nil)
(setq c-tab-always-indent t)
(setq c-indent-level 2)
(setq c-continued-statement-offset 2)
(setq c-brace-offset 0)
(setq c-brace-imaginary-offset 0)
(setq c-argdecl-indent 0)
(setq c-label-offset -2)
(setq auto-mode-alist (append auto-mode-alist
                             '(("\\.cxx\\'" . c++-mode))))

(defun c++-mode-fontify ()
  (interactive)
  (c++-mode)
  (font-lock-fontify-buffer))

(cond ((= emacs-major-version 19)
       (cond ((string-match "Lucid" emacs-version)
	      (add-hook 'tex-mode-hook '(lambda () (auto-fill-mode 1)))
	      (setq tex-default-mode 'latex-mode))
	     (t
	      (add-hook 'TeX-mode-hook '(lambda () (auto-fill-mode 1)))
	      (setq TeX-default-mode 'latex-mode)))
       (setq tex-open-quote "\"")
       (setq tex-close-quote "\""))
      ((= emacs-major-version 18)
       (setq LaTeX-mode-hook
	     '(lambda ()
		(auto-fill-mode 1)
		(define-key LaTeX-mode-map "\"" 'self-insert-command)))
       (setq TeX-mode-hook
	     '(lambda ()
		(auto-fill-mode 1)
		(define-key TeX-mode-map "\"" 'self-insert-command)))))

(setq make-backup-files nil)

(cond ((= emacs-major-version 19)
       (add-hook 'c-mode-hook '(lambda () (setq indent-tabs-mode nil))))
      ((= emacs-major-version 18)
       (setq-default indent-tabs-mode nil)))

(global-set-key "\C-\M-l" 'goto-line)
(global-set-key "\M-R" 'replace-string)

(cond ((and (not (string-match "Lucid" emacs-version))
            (= emacs-major-version 19))
       (standard-display-european t)
       (set-input-mode nil nil 1)))

(cond ((string-match "Lucid" emacs-version)
       (require 'func-menu)
       (add-hook 'find-file-hooks 'fume-add-menubar-entry)
       (define-key global-map "\C-cg" 'fume-prompt-function-goto)))

(cond ((string-match "Lucid" emacs-version)
       (global-set-key 'f1 'undo)
       (global-set-key 'f2 'call-last-kbd-macro)
       (global-set-key 'f3 'c++-mode-fontify)
       (global-set-key 'f4 'kill-buffer)
       (global-set-key 'f5 'count-words-region)
       (global-set-key 'f6 'tags-query-replace)
       (global-set-key 'f7 'tags-search)
       (global-set-key 'f8 'x-kill-primary-selection)
       (global-set-key 'f9 'untabify)
       (global-set-key 'f12 'help)
       (global-set-key 'backspace 'backward-delete-char-untabify)
       (global-set-key 'delete 'delete-char)
       (require 'font-lock)
       (set-face-foreground 'font-lock-function-name-face "blue")
       (set-face-foreground 'font-lock-comment-face "red")
       (set-face-foreground 'font-lock-string-face "forest green")
       (set-face-underline-p 'font-lock-string-face nil)
       (make-face-unitalic 'font-lock-string-face)
       (make-face-unitalic 'font-lock-function-name-face)
       (add-hook 'emacs-lisp-mode-hook  'turn-on-font-lock)
       (add-hook 'lisp-mode-hook        'turn-on-font-lock)
       (add-hook 'c-mode-hook           'turn-on-font-lock)
       (add-hook 'c++-mode-hook         'turn-on-font-lock)
       (add-hook 'perl-mode-hook        'turn-on-font-lock)
       (add-hook 'tex-mode-hook         'turn-on-font-lock)
       (add-hook 'texinfo-mode-hook     'turn-on-font-lock)
       (add-hook 'postscript-mode-hook  'turn-on-font-lock)
       (add-hook 'dired-mode-hook       'turn-on-font-lock)
       (add-hook 'ada-mode-hook         'turn-on-font-lock)
       ))



;; Options Menu Settings
;; =====================
(cond
 ((and (string-match "XEmacs" emacs-version)
       (boundp 'emacs-major-version)
       (= emacs-major-version 19)
       (>= emacs-minor-version 12))
  (setq-default overwrite-mode nil)
  (setq-default teach-extended-commands-p nil)
  (setq-default bar-cursor nil)
  (setq-default debug-on-error nil)
  (setq-default debug-on-quit nil)
  (setq-default get-frame-for-buffer-default-instance-limit nil)
  (setq-default temp-buffer-show-function 'show-temp-buffer-in-current-frame)
  (setq-default complex-buffers-menu-p nil)
  (setq-default font-menu-ignore-scaled-fonts t)
  (setq-default font-menu-this-frame-only-p t)
  (setq-default buffers-menu-max-size 20)
  (setq-default case-fold-search t)
  (setq-default case-replace t)
  (setq-default zmacs-regions t)
  (setq-default truncate-lines nil)
  (setq-default mouse-yank-at-point nil)
  (set-default-toolbar-position 'top)
  (add-spec-list-to-specifier top-toolbar-height 'nil)
  (add-spec-list-to-specifier bottom-toolbar-height 'nil)
  (add-spec-list-to-specifier left-toolbar-width 'nil)
  (add-spec-list-to-specifier right-toolbar-width 'nil)
  (add-spec-list-to-specifier scrollbar-width 'nil)
  (add-spec-list-to-specifier scrollbar-height 'nil)
  (add-spec-list-to-specifier modeline-shadow-thickness '((global (nil . 2))))
  (require 'paren)
  (paren-set-mode 'paren)
    (setq-default font-lock-auto-fontify t)
  (setq-default font-lock-use-fonts nil)
  (setq-default font-lock-use-colors t)
  (setq-default font-lock-use-maximal-decoration t)
  (setq-default font-lock-mode-enable-list nil)
  (setq-default font-lock-mode-disable-list nil)
  (require 'font-lock)
  (require 'fast-lock)
  (remove-hook 'font-lock-mode-hook 'turn-on-fast-lock)
  (make-face 'info-xref)
  (add-spec-list-to-specifier (face-property 'info-xref 'font) '((global (nil . "-adobe-courier-bold-r-normal--14-100-100-100-m-90-iso8859-1"))))
  (add-spec-list-to-specifier (face-property 'info-xref 'highlight) '((global ((tty) . t))))
  (make-face 'underline)
  (add-spec-list-to-specifier (face-property 'underline 'underline) '((global (nil . t))))
  (make-face 'isearch)
  (add-spec-list-to-specifier (face-property 'isearch 'background) '((global ((color) . "paleturquoise") ((color) . "green"))))
  (add-spec-list-to-specifier (face-property 'isearch 'reverse) '((global ((tty) . t))))
  (make-face 'bold-italic)
  (add-spec-list-to-specifier (face-property 'bold-italic 'font) '((global (nil . "-adobe-courier-bold-o-normal--14-100-100-100-m-90-iso8859-1"))))
  (add-spec-list-to-specifier (face-property 'bold-italic 'underline) '((global ((tty) . t))))
  (add-spec-list-to-specifier (face-property 'bold-italic 'highlight) '((global ((tty) . t))))
  (make-face 'modeline)
  (add-spec-list-to-specifier (face-property 'modeline 'foreground) '((global (nil . "Black"))))
  (add-spec-list-to-specifier (face-property 'modeline 'background) '((global (nil . "Gray75"))))
  (add-spec-list-to-specifier (face-property 'modeline 'font) '((global (nil . "-adobe-courier-medium-r-normal--14-100-100-100-m-90-iso8859-1"))))
  (add-spec-list-to-specifier (face-property 'modeline 'background-pixmap) '((global ((x) . [nothing]) ((tty) . [nothing]) ((stream) . [nothing]))))
  (add-spec-list-to-specifier (face-property 'modeline 'reverse) '((global ((tty) . t))))
  (make-face 'italic)
  (add-spec-list-to-specifier (face-property 'italic 'font) '((global (nil . "-adobe-courier-medium-o-normal--14-100-100-100-m-90-iso8859-1"))))
  (add-spec-list-to-specifier (face-property 'italic 'underline) '((global ((tty) . t))))
  (make-face 'paren-mismatch)
  (add-spec-list-to-specifier (face-property 'paren-mismatch 'foreground) '((global ((grayscale x) . [modeline foreground]) ((mono x) . [modeline foreground]))))
  (add-spec-list-to-specifier (face-property 'paren-mismatch 'background) '((global ((grayscale x) . [modeline background]) ((mono x) . [modeline background]) ((color x) . "DeepPink"))))
  (add-spec-list-to-specifier (face-property 'paren-mismatch 'reverse) '((global ((tty) . t))))
  (make-face 'font-lock-function-name-face)
  (add-spec-list-to-specifier (face-property 'font-lock-function-name-face 'foreground) '((global (nil . "red3"))))
  (make-face 'bold)
  (add-spec-list-to-specifier (face-property 'bold 'font) '((global (nil . "-adobe-courier-bold-r-normal--14-100-100-100-m-90-iso8859-1"))))
  (add-spec-list-to-specifier (face-property 'bold 'highlight) '((global ((tty) . t))))
  (make-face 'font-lock-string-face)
  (add-spec-list-to-specifier (face-property 'font-lock-string-face 'foreground) '((global (nil . "green4"))))
  (make-face 'right-margin)
  (make-face 'secondary-selection)
  (add-spec-list-to-specifier (face-property 'secondary-selection 'background) '((global ((grayscale) . "gray1") ((color) . "paleturquoise") ((color) . "green"))))
  (add-spec-list-to-specifier (face-property 'secondary-selection 'background-pixmap) '((global ((mono x) . [xbm :file "/usr/include/X11/bitmaps/gray1" :data (2 2 "")]) ((mono tty) . [string :data "gray1"]))))
  (make-face 'highlight)
  (add-spec-list-to-specifier (face-property 'highlight 'background) '((global ((color) . "darkseagreen2") ((color) . "green") ((grayscale) . "gray1"))))
  (add-spec-list-to-specifier (face-property 'highlight 'background-pixmap) '((global ((color x) . [nothing]) ((color tty) . [nothing]) ((color stream) . [nothing]) ((grayscale x) . [nothing]) ((grayscale tty) . [nothing]) ((grayscale stream) . [nothing]) ((mono x) . [xbm :file "/usr/include/X11/bitmaps/gray1" :data (2 2 "")]) ((mono tty) . [string :data "gray1"]))))
  (add-spec-list-to-specifier (face-property 'highlight 'highlight) '((global ((tty) . t))))
  (make-face 'font-lock-preprocessor-face)
  (add-spec-list-to-specifier (face-property 'font-lock-preprocessor-face 'foreground) '((global (nil . "blue3"))))
  (make-face 'primary-selection)
  (add-spec-list-to-specifier (face-property 'primary-selection 'background) '((global ((grayscale) . "gray3") ((color) . "gray"))))
  (add-spec-list-to-specifier (face-property 'primary-selection 'background-pixmap) '((global ((mono x) . [xbm :file "/usr/include/X11/bitmaps/gray3" :data (4 4 "  ")]) ((mono tty) . [string :data "gray3"]))))
  (make-face 'zmacs-region)
  (add-spec-list-to-specifier (face-property 'zmacs-region 'background) '((global ((grayscale) . "gray3") ((color) . "gray"))))
  (add-spec-list-to-specifier (face-property 'zmacs-region 'background-pixmap) '((global ((mono x) . [xbm :file "/usr/include/X11/bitmaps/gray3" :data (4 4 "  ")]) ((mono tty) . [string :data "gray3"]) ((grayscale x) . [nothing]) ((grayscale tty) . [nothing]) ((grayscale stream) . [nothing]) ((color x) . [nothing]) ((color tty) . [nothing]) ((color stream) . [nothing]))))
  (add-spec-list-to-specifier (face-property 'zmacs-region 'reverse) '((global ((tty) . t))))
  (make-face 'font-lock-type-face)
  (add-spec-list-to-specifier (face-property 'font-lock-type-face 'foreground) '((global (nil . "blue3"))))
  (make-face 'paren-blink-off)
  (add-spec-list-to-specifier (face-property 'paren-blink-off 'foreground) '((global (nil . "white"))))
  (make-face 'font-lock-comment-face)
  (add-spec-list-to-specifier (face-property 'font-lock-comment-face 'foreground) '((global (nil . "#6920ac"))))
  (make-face 'font-lock-keyword-face)
  (add-spec-list-to-specifier (face-property 'font-lock-keyword-face 'foreground) '((global (nil . "blue3"))))
  (make-face 'font-lock-doc-string-face)
  (add-spec-list-to-specifier (face-property 'font-lock-doc-string-face 'foreground) '((global (nil . "green4"))))
  (make-face 'info-node)
  (add-spec-list-to-specifier (face-property 'info-node 'font) '((global (nil . "-adobe-courier-bold-o-normal--14-100-100-100-m-90-iso8859-1"))))
  (add-spec-list-to-specifier (face-property 'info-node 'underline) '((global ((tty) . t))))
  (add-spec-list-to-specifier (face-property 'info-node 'highlight) '((global ((tty) . t))))
  (make-face 'default)
  (add-spec-list-to-specifier (face-property 'default 'foreground) '((global (nil . "black"))))
  (add-spec-list-to-specifier (face-property 'default 'background) '((global (nil . "white"))))
  (add-spec-list-to-specifier (face-property 'default 'font) '((global (nil . "-adobe-courier-medium-r-normal--14-100-100-100-m-90-iso8859-1"))))
  (make-face 'paren-match)
  (add-spec-list-to-specifier (face-property 'paren-match 'background) '((global ((color) . "darkseagreen2") ((color) . "green") ((grayscale) . "gray1"))))
  (add-spec-list-to-specifier (face-property 'paren-match 'background-pixmap) '((global ((color x) . [nothing]) ((color tty) . [nothing]) ((color stream) . [nothing]) ((grayscale x) . [nothing]) ((grayscale tty) . [nothing]) ((grayscale stream) . [nothing]) ((mono x) . [xbm :file "/usr/include/X11/bitmaps/gray1" :data (2 2 "")]) ((mono tty) . [string :data "gray1"]))))
  (add-spec-list-to-specifier (face-property 'paren-match 'highlight) '((global ((tty) . t))))
  (make-face 'left-margin)
  ))
;; ============================
;; End of Options Menu Settings


; Hack fuer AuCTeX
(defadvice set-text-properties (around ignore-strings activate)
   "Ignore strings."
   (or (stringp (ad-get-arg 3))
       ad-do-it))
